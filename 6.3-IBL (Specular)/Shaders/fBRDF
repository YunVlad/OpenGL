#version 330 core

out vec2 color;

in vec2 tex;

const float PI = 3.14159;

float VanDerCorpus(uint n, uint base)
{
    float invBase = 1.0 / float(base);
    float den = 1.0;
    float result = 0.0;
 
    for(uint i = 0u; i < 32u; ++i)
    {
        if(n > 0u)
        {
            den = mod(float(n), 2.0);
            result += den * invBase;
            invBase = invBase / 2.0;
            n = uint(float(n) / 2.0);
        }
    }
 
    return result;
}

vec2 Hammersley(uint i, uint N)
{
    return vec2(float(i)/float(N), VanDerCorpus(i, 2u));
}

vec3 SampleGGX(vec2 xi, vec3 n, float roughness)
{
	float a = pow(roughness, 2.0);
	
	float phi = 2.0 * PI * xi.x;
	float cosTheta = sqrt((1.0 - xi.y) / (1.0 + (a*a - 1.0) * xi.y));
	float sinTheta = sqrt(1.0 - cosTheta*cosTheta);
	
	vec3 h;
	h.x = cos(phi) * sinTheta;
	h.y = sin(phi) * sinTheta;
	h.z = cosTheta;
	
	vec3 up = abs(n.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
	vec3 tangent   = normalize(cross(up, n));
	vec3 bitangent = cross(n, tangent);
	
	vec3 sample = tangent * h.x + bitangent * h.y + n * h.z;
	return normalize(sample);
}

float SchlickGGX(vec3 n, vec3 v, float roughness)
{
    float r = roughness;
    float k = pow(r, 2.0) / 2.0;

    float num   = max(dot(n, v), 0.0);
    float den = num * (1.0 - k) + k;

    return num/den;
}

float GeometrySmith(vec3 n, vec3 v, vec3 L, float roughness)
{
    return (SchlickGGX(n, v, roughness) * SchlickGGX(n, L, roughness));
}

vec2 IntegrateBRDF(float NdotV, float roughness)
{
    vec3 V;
    V.x = sqrt(1.0 - NdotV*NdotV);
    V.y = 0.0;
    V.z = NdotV;

    float A = 0.0;
    float B = 0.0; 

    vec3 N = vec3(0.0, 0.0, 1.0);
    
    const uint SAMPLE_COUNT = 1024u;
    for(uint i = 0u; i < SAMPLE_COUNT; ++i)
    {
        vec2 Xi = Hammersley(i, SAMPLE_COUNT);
        vec3 H = SampleGGX(Xi, N, roughness);
        vec3 L = normalize(2.0 * dot(V, H) * H - V);

        float NdotL = max(L.z, 0.0);
        float NdotH = max(H.z, 0.0);
        float VdotH = max(dot(V, H), 0.0);

        if(NdotL > 0.0)
        {
            float G = GeometrySmith(N, V, L, roughness);
            float G_Vis = (G * VdotH) / (NdotH * NdotV);
            float Fc = pow(1.0 - VdotH, 5.0);

            A += (1.0 - Fc) * G_Vis;
            B += Fc * G_Vis;
        }
    }

    return vec2(A/float(SAMPLE_COUNT), B/float(SAMPLE_COUNT));
}
 
void main()
{
    vec2 integratedBRDF = IntegrateBRDF(tex.x, tex.y);
    color = integratedBRDF;
};